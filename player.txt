import pygame
from logger import *

logger.debug("RealDL Player Code.")

class Player inherits pygame.sprite.Sprite
    private image 
    private rect
    private direction
    private speed
    private id
    private obstacle_sprites

    public procedure new(pos, new_image, groups, new_obstacle_sprites, new_id)
        try
            super.new(groups)
            image = pygame.image.load(new_image).convert_alpha()
            rect = image.get_rect(topleft = pos)
            direction = pygame.math.Vector2()
            speed = 5
            id = new_id
            obstacle_sprites = new_obstacle_sprites
        except FileExistsError as FileError
            logger.error(f"Failed to create Player Class: {FileError}")
        endtry
    endprocedure

    public procedure input()
        keys = pygame.key.get_pressed()

        if keys[pygame.K_LEFT] or keys[pygame.K_a] then
            direction.x = -1
        else if keys[pygame.K_RIGHT] or keys[pygame.K_d] then
            direction.x = 1
        else
            direction.x = 0
        endif

        if keys[pygame.K_UP] or keys[pygame.K_w] then
            direction.y = -1
        else if keys[pygame.K_DOWN] or keys[pygame.K_s] then
            direction.y = 1
        else
            direction.y = 0
        endif
    endprocedure

    public procedure move(speed)
        if direction.magnitude() != 0 then
            direction = direction.normalize()
        endif

        rect.x += direction.x * speed
        collision('horizontal')
        rect.y += direction.y * speed
        collision('vertical')
    endprocedure

    public procedure collision(direction)
        if direction == 'horizontal' then
            for sprite in obstacle_sprites
                if sprite.rect.colliderect(rect) then
                    if direction.x == 1 then
                        rect.right = sprite.rect.left
                    else if direction.x == -1 then
                        rect.left = sprite.rect.right
                    endif
                endif
            next sprite
        endif

        if direction == 'vertical' then
            for sprite in obstacle_sprites
                if sprite.rect.colliderect(rect) then
                    if direction.y == 1 then
                        rect.bottom = sprite.rect.top
                    else if direction.y == -1 then
                        rect.top = sprite.rect.bottom
                    endif
                endif
            next sprite
        endif
    endprocedure

    public procedure update()
        input()
        move(speed)
    endprocedure
endclass
